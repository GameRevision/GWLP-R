// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef GW1_PACKET_SCHEMA_HXX
#define GW1_PACKET_SCHEMA_HXX

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 3030000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include "gw1-packet-schema-fwd.hxx"

#include <memory>    // std::auto_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#ifndef XSD_DONT_INCLUDE_INLINE
#define XSD_DONT_INCLUDE_INLINE

#undef XSD_DONT_INCLUDE_INLINE
#else

#endif // XSD_DONT_INCLUDE_INLINE

class CommunicationDirection: public ::xml_schema::type
{
  public:
  // Packet
  // 
  typedef ::PacketType Packet_type;
  typedef ::xsd::cxx::tree::sequence< Packet_type > Packet_sequence;
  typedef Packet_sequence::iterator Packet_iterator;
  typedef Packet_sequence::const_iterator Packet_const_iterator;
  typedef ::xsd::cxx::tree::traits< Packet_type, char > Packet_traits;

  const Packet_sequence&
  Packet () const;

  Packet_sequence&
  Packet ();

  void
  Packet (const Packet_sequence& s);

  // name
  // 
  typedef ::xml_schema::string name_type;
  typedef ::xsd::cxx::tree::traits< name_type, char > name_traits;

  const name_type&
  name () const;

  name_type&
  name ();

  void
  name (const name_type& x);

  void
  name (::std::auto_ptr< name_type > p);

  // abbr
  // 
  typedef ::xml_schema::string abbr_type;
  typedef ::xsd::cxx::tree::traits< abbr_type, char > abbr_traits;

  const abbr_type&
  abbr () const;

  abbr_type&
  abbr ();

  void
  abbr (const abbr_type& x);

  void
  abbr (::std::auto_ptr< abbr_type > p);

  // Constructors.
  //
  CommunicationDirection ();

  CommunicationDirection (const name_type&,
                          const abbr_type&);

  CommunicationDirection (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

  CommunicationDirection (const CommunicationDirection& x,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

  virtual CommunicationDirection*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~CommunicationDirection ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  Packet_sequence Packet_;
  ::xsd::cxx::tree::one< name_type > name_;
  ::xsd::cxx::tree::one< abbr_type > abbr_;
};

class PacketType: public ::xml_schema::type
{
  public:
  // Info
  // 
  typedef ::MetaInfo Info_type;
  typedef ::xsd::cxx::tree::optional< Info_type > Info_optional;
  typedef ::xsd::cxx::tree::traits< Info_type, char > Info_traits;

  const Info_optional&
  Info () const;

  Info_optional&
  Info ();

  void
  Info (const Info_type& x);

  void
  Info (const Info_optional& x);

  void
  Info (::std::auto_ptr< Info_type > p);

  // Field
  // 
  typedef ::PacketFieldType Field_type;
  typedef ::xsd::cxx::tree::sequence< Field_type > Field_sequence;
  typedef Field_sequence::iterator Field_iterator;
  typedef Field_sequence::const_iterator Field_const_iterator;
  typedef ::xsd::cxx::tree::traits< Field_type, char > Field_traits;

  const Field_sequence&
  Field () const;

  Field_sequence&
  Field ();

  void
  Field (const Field_sequence& s);

  // header
  // 
  typedef ::xml_schema::integer header_type;
  typedef ::xsd::cxx::tree::traits< header_type, char > header_traits;

  const header_type&
  header () const;

  header_type&
  header ();

  void
  header (const header_type& x);

  // Constructors.
  //
  PacketType ();

  PacketType (const header_type&);

  PacketType (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  PacketType (const PacketType& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  virtual PacketType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~PacketType ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  Info_optional Info_;
  Field_sequence Field_;
  ::xsd::cxx::tree::one< header_type > header_;
};

class MetaInfo: public ::xml_schema::type
{
  public:
  // Name
  // 
  typedef ::xml_schema::string Name_type;
  typedef ::xsd::cxx::tree::optional< Name_type > Name_optional;
  typedef ::xsd::cxx::tree::traits< Name_type, char > Name_traits;

  const Name_optional&
  Name () const;

  Name_optional&
  Name ();

  void
  Name (const Name_type& x);

  void
  Name (const Name_optional& x);

  void
  Name (::std::auto_ptr< Name_type > p);

  // Description
  // 
  typedef ::xml_schema::string Description_type;
  typedef ::xsd::cxx::tree::optional< Description_type > Description_optional;
  typedef ::xsd::cxx::tree::traits< Description_type, char > Description_traits;

  const Description_optional&
  Description () const;

  Description_optional&
  Description ();

  void
  Description (const Description_type& x);

  void
  Description (const Description_optional& x);

  void
  Description (::std::auto_ptr< Description_type > p);

  // Author
  // 
  typedef ::xml_schema::string Author_type;
  typedef ::xsd::cxx::tree::optional< Author_type > Author_optional;
  typedef ::xsd::cxx::tree::traits< Author_type, char > Author_traits;

  const Author_optional&
  Author () const;

  Author_optional&
  Author ();

  void
  Author (const Author_type& x);

  void
  Author (const Author_optional& x);

  void
  Author (::std::auto_ptr< Author_type > p);

  // Constructors.
  //
  MetaInfo ();

  MetaInfo (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

  MetaInfo (const MetaInfo& x,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

  virtual MetaInfo*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~MetaInfo ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  Name_optional Name_;
  Description_optional Description_;
  Author_optional Author_;
};

class PacketFieldType: public ::xml_schema::type
{
  public:
  // Info
  // 
  typedef ::MetaInfo Info_type;
  typedef ::xsd::cxx::tree::optional< Info_type > Info_optional;
  typedef ::xsd::cxx::tree::traits< Info_type, char > Info_traits;

  const Info_optional&
  Info () const;

  Info_optional&
  Info ();

  void
  Info (const Info_type& x);

  void
  Info (const Info_optional& x);

  void
  Info (::std::auto_ptr< Info_type > p);

  // Field
  // 
  typedef ::PacketFieldType Field_type;
  typedef ::xsd::cxx::tree::sequence< Field_type > Field_sequence;
  typedef Field_sequence::iterator Field_iterator;
  typedef Field_sequence::const_iterator Field_const_iterator;
  typedef ::xsd::cxx::tree::traits< Field_type, char > Field_traits;

  const Field_sequence&
  Field () const;

  Field_sequence&
  Field ();

  void
  Field (const Field_sequence& s);

  // type
  // 
  typedef ::PacketSimpleTypes type_type;
  typedef ::xsd::cxx::tree::traits< type_type, char > type_traits;

  const type_type&
  type () const;

  type_type&
  type ();

  void
  type (const type_type& x);

  void
  type (::std::auto_ptr< type_type > p);

  // prefixType
  // 
  typedef ::PacketSimpleTypes prefixType_type;
  typedef ::xsd::cxx::tree::optional< prefixType_type > prefixType_optional;
  typedef ::xsd::cxx::tree::traits< prefixType_type, char > prefixType_traits;

  const prefixType_optional&
  prefixType () const;

  prefixType_optional&
  prefixType ();

  void
  prefixType (const prefixType_type& x);

  void
  prefixType (const prefixType_optional& x);

  void
  prefixType (::std::auto_ptr< prefixType_type > p);

  // static
  // 
  typedef ::xml_schema::boolean static_type;
  typedef ::xsd::cxx::tree::optional< static_type > static_optional;
  typedef ::xsd::cxx::tree::traits< static_type, char > static_traits;

  const static_optional&
  static_ () const;

  static_optional&
  static_ ();

  void
  static_ (const static_type& x);

  void
  static_ (const static_optional& x);

  // occurs
  // 
  typedef ::xml_schema::unsigned_int occurs_type;
  typedef ::xsd::cxx::tree::optional< occurs_type > occurs_optional;
  typedef ::xsd::cxx::tree::traits< occurs_type, char > occurs_traits;

  const occurs_optional&
  occurs () const;

  occurs_optional&
  occurs ();

  void
  occurs (const occurs_type& x);

  void
  occurs (const occurs_optional& x);

  // Constructors.
  //
  PacketFieldType ();

  PacketFieldType (const type_type&);

  PacketFieldType (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

  PacketFieldType (const PacketFieldType& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

  virtual PacketFieldType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~PacketFieldType ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  Info_optional Info_;
  Field_sequence Field_;
  ::xsd::cxx::tree::one< type_type > type_;
  prefixType_optional prefixType_;
  static_optional static__;
  occurs_optional occurs_;
};

class PacketSimpleTypes: public ::xml_schema::string
{
  public:
  enum value
  {
    int8,
    int16,
    int32,
    int64,
    packed,
    float_,
    vec2,
    vec3,
    vec4,
    uuid16,
    uuid28,
    agentid,
    ascii,
    utf16,
    nested
  };

  PacketSimpleTypes ();

  PacketSimpleTypes (value v);

  PacketSimpleTypes (const char* v);

  PacketSimpleTypes (const ::std::string& v);

  PacketSimpleTypes (const ::xml_schema::string& v);

  PacketSimpleTypes (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

  PacketSimpleTypes (const ::xercesc::DOMAttr& a,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

  PacketSimpleTypes (const ::std::string& s,
                     const ::xercesc::DOMElement* e,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

  PacketSimpleTypes (const PacketSimpleTypes& x,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

  virtual PacketSimpleTypes*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  PacketSimpleTypes&
  operator= (value v);

  virtual
  operator value () const
  {
    return _xsd_PacketSimpleTypes_convert ();
  }

  protected:
  value
  _xsd_PacketSimpleTypes_convert () const;

  public:
  static const char* const _xsd_PacketSimpleTypes_literals_[15];
  static const value _xsd_PacketSimpleTypes_indexes_[15];
};

class Packets: public ::xml_schema::type
{
  public:
  // Direction
  // 
  typedef ::CommunicationDirection Direction_type;
  typedef ::xsd::cxx::tree::sequence< Direction_type > Direction_sequence;
  typedef Direction_sequence::iterator Direction_iterator;
  typedef Direction_sequence::const_iterator Direction_const_iterator;
  typedef ::xsd::cxx::tree::traits< Direction_type, char > Direction_traits;

  const Direction_sequence&
  Direction () const;

  Direction_sequence&
  Direction ();

  void
  Direction (const Direction_sequence& s);

  // Constructors.
  //
  Packets ();

  Packets (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

  Packets (const Packets& x,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

  virtual Packets*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~Packets ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  Direction_sequence Direction_;
};

#ifndef XSD_DONT_INCLUDE_INLINE

#endif // XSD_DONT_INCLUDE_INLINE

#include <iosfwd>

::std::ostream&
operator<< (::std::ostream&, const CommunicationDirection&);

::std::ostream&
operator<< (::std::ostream&, const PacketType&);

::std::ostream&
operator<< (::std::ostream&, const MetaInfo&);

::std::ostream&
operator<< (::std::ostream&, const PacketFieldType&);

::std::ostream&
operator<< (::std::ostream&, PacketSimpleTypes::value);

::std::ostream&
operator<< (::std::ostream&, const PacketSimpleTypes&);

::std::ostream&
operator<< (::std::ostream&, const Packets&);

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

// Parse a URI or a local file.
//

::std::auto_ptr< ::Packets >
Packets_ (const ::std::string& uri,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::Packets >
Packets_ (const ::std::string& uri,
          ::xml_schema::error_handler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::Packets >
Packets_ (const ::std::string& uri,
          ::xercesc::DOMErrorHandler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse std::istream.
//

::std::auto_ptr< ::Packets >
Packets_ (::std::istream& is,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::Packets >
Packets_ (::std::istream& is,
          ::xml_schema::error_handler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::Packets >
Packets_ (::std::istream& is,
          ::xercesc::DOMErrorHandler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::Packets >
Packets_ (::std::istream& is,
          const ::std::string& id,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::Packets >
Packets_ (::std::istream& is,
          const ::std::string& id,
          ::xml_schema::error_handler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::Packets >
Packets_ (::std::istream& is,
          const ::std::string& id,
          ::xercesc::DOMErrorHandler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::InputSource.
//

::std::auto_ptr< ::Packets >
Packets_ (::xercesc::InputSource& is,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::Packets >
Packets_ (::xercesc::InputSource& is,
          ::xml_schema::error_handler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::Packets >
Packets_ (::xercesc::InputSource& is,
          ::xercesc::DOMErrorHandler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::DOMDocument.
//

::std::auto_ptr< ::Packets >
Packets_ (const ::xercesc::DOMDocument& d,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::Packets >
Packets_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

// Serialize to std::ostream.
//

void
Packets_ (::std::ostream& os,
          const ::Packets& x, 
          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
          const ::std::string& e = "UTF-8",
          ::xml_schema::flags f = 0);

void
Packets_ (::std::ostream& os,
          const ::Packets& x, 
          ::xml_schema::error_handler& eh,
          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
          const ::std::string& e = "UTF-8",
          ::xml_schema::flags f = 0);

void
Packets_ (::std::ostream& os,
          const ::Packets& x, 
          ::xercesc::DOMErrorHandler& eh,
          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
          const ::std::string& e = "UTF-8",
          ::xml_schema::flags f = 0);

// Serialize to xercesc::XMLFormatTarget.
//

void
Packets_ (::xercesc::XMLFormatTarget& ft,
          const ::Packets& x, 
          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
          const ::std::string& e = "UTF-8",
          ::xml_schema::flags f = 0);

void
Packets_ (::xercesc::XMLFormatTarget& ft,
          const ::Packets& x, 
          ::xml_schema::error_handler& eh,
          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
          const ::std::string& e = "UTF-8",
          ::xml_schema::flags f = 0);

void
Packets_ (::xercesc::XMLFormatTarget& ft,
          const ::Packets& x, 
          ::xercesc::DOMErrorHandler& eh,
          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
          const ::std::string& e = "UTF-8",
          ::xml_schema::flags f = 0);

// Serialize to an existing xercesc::DOMDocument.
//

void
Packets_ (::xercesc::DOMDocument& d,
          const ::Packets& x,
          ::xml_schema::flags f = 0);

// Serialize to a new xercesc::DOMDocument.
//

::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
Packets_ (const ::Packets& x, 
          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
          ::xml_schema::flags f = 0);

void
operator<< (::xercesc::DOMElement&, const CommunicationDirection&);

void
operator<< (::xercesc::DOMElement&, const PacketType&);

void
operator<< (::xercesc::DOMElement&, const MetaInfo&);

void
operator<< (::xercesc::DOMElement&, const PacketFieldType&);

void
operator<< (::xercesc::DOMElement&, const PacketSimpleTypes&);

void
operator<< (::xercesc::DOMAttr&, const PacketSimpleTypes&);

void
operator<< (::xml_schema::list_stream&,
            const PacketSimpleTypes&);

void
operator<< (::xercesc::DOMElement&, const Packets&);

#ifndef XSD_DONT_INCLUDE_INLINE
#include "gw1-packet-schema.ixx"
#endif // XSD_DONT_INCLUDE_INLINE

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // GW1_PACKET_SCHEMA_HXX
