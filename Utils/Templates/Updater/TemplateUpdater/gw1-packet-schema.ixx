// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef GW1_PACKET_SCHEMA_IXX
#define GW1_PACKET_SCHEMA_IXX

// Begin prologue.
//
//
// End prologue.

// CommunicationDirection
// 

inline
const CommunicationDirection::Packet_sequence& CommunicationDirection::
Packet () const
{
  return this->Packet_;
}

inline
CommunicationDirection::Packet_sequence& CommunicationDirection::
Packet ()
{
  return this->Packet_;
}

inline
void CommunicationDirection::
Packet (const Packet_sequence& s)
{
  this->Packet_ = s;
}

inline
const CommunicationDirection::name_type& CommunicationDirection::
name () const
{
  return this->name_.get ();
}

inline
CommunicationDirection::name_type& CommunicationDirection::
name ()
{
  return this->name_.get ();
}

inline
void CommunicationDirection::
name (const name_type& x)
{
  this->name_.set (x);
}

inline
void CommunicationDirection::
name (::std::auto_ptr< name_type > x)
{
  this->name_.set (x);
}

inline
const CommunicationDirection::abbr_type& CommunicationDirection::
abbr () const
{
  return this->abbr_.get ();
}

inline
CommunicationDirection::abbr_type& CommunicationDirection::
abbr ()
{
  return this->abbr_.get ();
}

inline
void CommunicationDirection::
abbr (const abbr_type& x)
{
  this->abbr_.set (x);
}

inline
void CommunicationDirection::
abbr (::std::auto_ptr< abbr_type > x)
{
  this->abbr_.set (x);
}


// PacketType
// 

inline
const PacketType::Info_optional& PacketType::
Info () const
{
  return this->Info_;
}

inline
PacketType::Info_optional& PacketType::
Info ()
{
  return this->Info_;
}

inline
void PacketType::
Info (const Info_type& x)
{
  this->Info_.set (x);
}

inline
void PacketType::
Info (const Info_optional& x)
{
  this->Info_ = x;
}

inline
void PacketType::
Info (::std::auto_ptr< Info_type > x)
{
  this->Info_.set (x);
}

inline
const PacketType::Field_sequence& PacketType::
Field () const
{
  return this->Field_;
}

inline
PacketType::Field_sequence& PacketType::
Field ()
{
  return this->Field_;
}

inline
void PacketType::
Field (const Field_sequence& s)
{
  this->Field_ = s;
}

inline
const PacketType::header_type& PacketType::
header () const
{
  return this->header_.get ();
}

inline
PacketType::header_type& PacketType::
header ()
{
  return this->header_.get ();
}

inline
void PacketType::
header (const header_type& x)
{
  this->header_.set (x);
}


// MetaInfo
// 

inline
const MetaInfo::Name_optional& MetaInfo::
Name () const
{
  return this->Name_;
}

inline
MetaInfo::Name_optional& MetaInfo::
Name ()
{
  return this->Name_;
}

inline
void MetaInfo::
Name (const Name_type& x)
{
  this->Name_.set (x);
}

inline
void MetaInfo::
Name (const Name_optional& x)
{
  this->Name_ = x;
}

inline
void MetaInfo::
Name (::std::auto_ptr< Name_type > x)
{
  this->Name_.set (x);
}

inline
const MetaInfo::Description_optional& MetaInfo::
Description () const
{
  return this->Description_;
}

inline
MetaInfo::Description_optional& MetaInfo::
Description ()
{
  return this->Description_;
}

inline
void MetaInfo::
Description (const Description_type& x)
{
  this->Description_.set (x);
}

inline
void MetaInfo::
Description (const Description_optional& x)
{
  this->Description_ = x;
}

inline
void MetaInfo::
Description (::std::auto_ptr< Description_type > x)
{
  this->Description_.set (x);
}

inline
const MetaInfo::Author_optional& MetaInfo::
Author () const
{
  return this->Author_;
}

inline
MetaInfo::Author_optional& MetaInfo::
Author ()
{
  return this->Author_;
}

inline
void MetaInfo::
Author (const Author_type& x)
{
  this->Author_.set (x);
}

inline
void MetaInfo::
Author (const Author_optional& x)
{
  this->Author_ = x;
}

inline
void MetaInfo::
Author (::std::auto_ptr< Author_type > x)
{
  this->Author_.set (x);
}


// PacketFieldType
// 

inline
const PacketFieldType::Info_optional& PacketFieldType::
Info () const
{
  return this->Info_;
}

inline
PacketFieldType::Info_optional& PacketFieldType::
Info ()
{
  return this->Info_;
}

inline
void PacketFieldType::
Info (const Info_type& x)
{
  this->Info_.set (x);
}

inline
void PacketFieldType::
Info (const Info_optional& x)
{
  this->Info_ = x;
}

inline
void PacketFieldType::
Info (::std::auto_ptr< Info_type > x)
{
  this->Info_.set (x);
}

inline
const PacketFieldType::Field_sequence& PacketFieldType::
Field () const
{
  return this->Field_;
}

inline
PacketFieldType::Field_sequence& PacketFieldType::
Field ()
{
  return this->Field_;
}

inline
void PacketFieldType::
Field (const Field_sequence& s)
{
  this->Field_ = s;
}

inline
const PacketFieldType::type_type& PacketFieldType::
type () const
{
  return this->type_.get ();
}

inline
PacketFieldType::type_type& PacketFieldType::
type ()
{
  return this->type_.get ();
}

inline
void PacketFieldType::
type (const type_type& x)
{
  this->type_.set (x);
}

inline
void PacketFieldType::
type (::std::auto_ptr< type_type > x)
{
  this->type_.set (x);
}

inline
const PacketFieldType::prefixType_optional& PacketFieldType::
prefixType () const
{
  return this->prefixType_;
}

inline
PacketFieldType::prefixType_optional& PacketFieldType::
prefixType ()
{
  return this->prefixType_;
}

inline
void PacketFieldType::
prefixType (const prefixType_type& x)
{
  this->prefixType_.set (x);
}

inline
void PacketFieldType::
prefixType (const prefixType_optional& x)
{
  this->prefixType_ = x;
}

inline
void PacketFieldType::
prefixType (::std::auto_ptr< prefixType_type > x)
{
  this->prefixType_.set (x);
}

inline
const PacketFieldType::static_optional& PacketFieldType::
static_ () const
{
  return this->static__;
}

inline
PacketFieldType::static_optional& PacketFieldType::
static_ ()
{
  return this->static__;
}

inline
void PacketFieldType::
static_ (const static_type& x)
{
  this->static__.set (x);
}

inline
void PacketFieldType::
static_ (const static_optional& x)
{
  this->static__ = x;
}

inline
const PacketFieldType::occurs_optional& PacketFieldType::
occurs () const
{
  return this->occurs_;
}

inline
PacketFieldType::occurs_optional& PacketFieldType::
occurs ()
{
  return this->occurs_;
}

inline
void PacketFieldType::
occurs (const occurs_type& x)
{
  this->occurs_.set (x);
}

inline
void PacketFieldType::
occurs (const occurs_optional& x)
{
  this->occurs_ = x;
}


// PacketSimpleTypes
// 

inline
PacketSimpleTypes::
PacketSimpleTypes ()
: ::xml_schema::string ()
{
}

inline
PacketSimpleTypes::
PacketSimpleTypes (value v)
: ::xml_schema::string (_xsd_PacketSimpleTypes_literals_[v])
{
}

inline
PacketSimpleTypes::
PacketSimpleTypes (const char* v)
: ::xml_schema::string (v)
{
}

inline
PacketSimpleTypes::
PacketSimpleTypes (const ::std::string& v)
: ::xml_schema::string (v)
{
}

inline
PacketSimpleTypes::
PacketSimpleTypes (const ::xml_schema::string& v)
: ::xml_schema::string (v)
{
}

inline
PacketSimpleTypes::
PacketSimpleTypes (const PacketSimpleTypes& v,
                   ::xml_schema::flags f,
                   ::xml_schema::container* c)
: ::xml_schema::string (v, f, c)
{
}

inline
PacketSimpleTypes& PacketSimpleTypes::
operator= (value v)
{
  static_cast< ::xml_schema::string& > (*this) = 
  ::xml_schema::string (_xsd_PacketSimpleTypes_literals_[v]);

  return *this;
}


// Packets
// 

inline
const Packets::Direction_sequence& Packets::
Direction () const
{
  return this->Direction_;
}

inline
Packets::Direction_sequence& Packets::
Direction ()
{
  return this->Direction_;
}

inline
void Packets::
Direction (const Direction_sequence& s)
{
  this->Direction_ = s;
}


// Begin epilogue.
//
//
// End epilogue.

#endif // GW1_PACKET_SCHEMA_IXX
