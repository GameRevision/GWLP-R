/**
 * For copyright information see the LICENSE document.
 */

package com.packetcodegen;

import java.text.SimpleDateFormat;
import java.util.Calendar;


/**
 * Helps by creating and assembling the code fragments.
 * 
 * @author _rusty
 */
public final class CodeStyleHelper 
{
    private final String dateFormat = "yyyy-MM-dd"
    private final String singleIndent;
    private StringBuilder lines; 
    
    /**
     * Constructor.
     * 
     * @param       indentSpaces            The number of spaces of an indentation
     * @param       className               Will be used in the created code
     * @param       packageName             Will be used in the created code
     */
    public CodeStyleHelper(int indentSpaces, String className, String packageName)
    {
        // create all necessary objects
        singleIndent = String.format("%1$#" + indentSpaces + "s", "");
        lines = new StringBuilder();
        
        String date = (new SimpleDateFormat(dateFormat)).format(Calendar.getInstance().getTime());
        
        // create the outline
        lines
                .append("/**")                                                                      .append("\n")
                .append(" * For copyright information see the LICENSE document.")                   .append("\n")
                .append(" */")                                                                      .append("\n")
                .append("")                                                                         .append("\n")
                .append("/**")                                                                      .append("\n")
                .append(" * Auto-generated by PacketCodeGen, on ").append(date)                     .append("\n")
                .append(" */")                                                                      .append("\n")
                .append("")                                                                         .append("\n")
                .append("package ").append(packageName).append(";")                                 .append("\n")
                .append("")                                                                         .append("\n")
                .append("")                                                                         .append("\n")
                .append("/**")                                                                      .append("\n")
                .append(" * This is an automatically generated ShardletAction.")                    .append("\n")
                .append(" * It resembles the packet template that has been ")                       .append("\n")
                .append(" * parsed from our packet templates xml.")                                 .append("\n")
                .append(" *")                                                                       .append("\n")
                .append(" * @author PacketCodeGen")                                                 .append("\n")
                .append(" */")                                                                      .append("\n")
                .append("public final class ").append(className).append(" extends GenericAction")   .append("\n")
                .append("{")                                                                        .append("\n")
                .append("")                                                                         .append("\n");
    }
}
