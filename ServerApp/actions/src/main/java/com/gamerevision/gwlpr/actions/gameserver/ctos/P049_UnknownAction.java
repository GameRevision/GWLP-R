/**
 * For copyright information see the LICENSE document.
 */

/**
 * Auto-generated by PacketCodeGen, on 2012-05-28
 */

package com.gamerevision.gwlpr.actions.gameserver.ctos;

import com.realityshard.shardlet.EventAggregator;
import com.realityshard.shardlet.GenericEventAction;
import java.nio.BufferUnderflowException;
import java.nio.ByteBuffer;

/**
 * This is an automatically generated ShardletAction.
 * It resembles the packet template that has been 
 * parsed from our packet templates xml.
 *
 * Auto generated 
 *
 * @author GWLPR Template Updater
 */
public final class P049_UnknownAction extends GenericEventAction
{

    private int unknown1;
    private byte unknown2;
    private byte unknown3;
    private byte unknown4;
    private byte unknown5;
    private byte unknown6;
    private short unknown7;
    private byte unknown8;


    public short getHeader()
    {
        return 49;
    }


    public int getUnknown1()
    {
        return unknown1;
    }


    public byte getUnknown2()
    {
        return unknown2;
    }


    public byte getUnknown3()
    {
        return unknown3;
    }


    public byte getUnknown4()
    {
        return unknown4;
    }


    public byte getUnknown5()
    {
        return unknown5;
    }


    public byte getUnknown6()
    {
        return unknown6;
    }


    public short getUnknown7()
    {
        return unknown7;
    }


    public byte getUnknown8()
    {
        return unknown8;
    }


    @Override
    public boolean deserialize()
    {
        ByteBuffer buffer = getBuffer();
        int bufferPosition = buffer.position();

        try
        {
            unknown1 = buffer.getInt();
            unknown2 = buffer.get();
            unknown3 = buffer.get();
            unknown4 = buffer.get();
            unknown5 = buffer.get();
            unknown6 = buffer.get();
            unknown7 = buffer.getShort();
            unknown8 = buffer.get();
        }
        catch (BufferUnderflowException e)
        {
            buffer.position(bufferPosition);
            return false;
        }

        return true;
    }


    @Override
    public void triggerEvent(EventAggregator aggregator)
    {
        aggregator.triggerEvent(this);
    }
}