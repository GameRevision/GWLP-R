/**
 * For copyright information see the LICENSE document.
 */

/**
 * Auto-generated by PacketCodeGen, on 2012-05-31
 */

package com.gamerevision.gwlpr.actions.gameserver.stoc;

import com.realityshard.shardlet.GenericAction;
import java.nio.BufferOverflowException;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * This is an automatically generated ShardletAction.
 * It resembles the packet template that has been 
 * parsed from our packet templates xml.
 *
 * Auto generated 
 *
 * @author GWLPR Template Updater
 */
public final class P278_UnknownAction extends GenericAction
{

    private short unknown1;
    private byte[] unknown2;
    private char[] unknown3;
    private char[] unknown4;
    private byte unknown5;
    private byte unknown6;
    private byte unknown7;
    private byte unknown8;
    private byte unknown9;
    private byte unknown10;
    private short unknown11;
    private byte unknown12;
    private byte unknown13;
    private int unknown14;
    private byte unknown15;


    public short getHeader()
    {
        return 278;
    }


    public void setUnknown1(short newValue)
    {
        unknown1 = newValue;
    }


    public void setUnknown2(byte[] newValue)
    {
        unknown2 = newValue;
    }


    public void setUnknown3(char[] newValue)
    {
        unknown3 = newValue;
    }


    public void setUnknown4(char[] newValue)
    {
        unknown4 = newValue;
    }


    public void setUnknown5(byte newValue)
    {
        unknown5 = newValue;
    }


    public void setUnknown6(byte newValue)
    {
        unknown6 = newValue;
    }


    public void setUnknown7(byte newValue)
    {
        unknown7 = newValue;
    }


    public void setUnknown8(byte newValue)
    {
        unknown8 = newValue;
    }


    public void setUnknown9(byte newValue)
    {
        unknown9 = newValue;
    }


    public void setUnknown10(byte newValue)
    {
        unknown10 = newValue;
    }


    public void setUnknown11(short newValue)
    {
        unknown11 = newValue;
    }


    public void setUnknown12(byte newValue)
    {
        unknown12 = newValue;
    }


    public void setUnknown13(byte newValue)
    {
        unknown13 = newValue;
    }


    public void setUnknown14(int newValue)
    {
        unknown14 = newValue;
    }


    public void setUnknown15(byte newValue)
    {
        unknown15 = newValue;
    }


    private int getSize()
    {
        int size = 39;

        if (unknown2 == null)
        {
            return 0;
        }
        
        if (unknown2.length != 16)
        {
            return 0;
        }
        if (unknown3 != null)
        {
            size += 2 * unknown3.length;
        }
        if (unknown4 != null)
        {
            size += 2 * unknown4.length;
        }

        return size;
    }


    @Override
    public boolean serialize()
    {
        int size = getSize();

        if (size == 0)
        {
            return false;
        }

        ByteBuffer buffer = ByteBuffer.allocate(size).order(ByteOrder.LITTLE_ENDIAN);

        try
        {
            buffer.putShort(getHeader());

            buffer.putShort(unknown1);
            for (int i = 0; i < 16; i++)
            {
                buffer.put(unknown2[i]);
            }
            short prefix_unknown3;
            if (unknown3 == null)
            {
                prefix_unknown3 = 0;
            }
            else
            {
                prefix_unknown3 = (short) unknown3.length;
            }
            buffer.putShort(prefix_unknown3);
            
            for (int i = 0; i < prefix_unknown3; i++)
            {
                buffer.putChar(unknown3[i]);
            }
            short prefix_unknown4;
            if (unknown4 == null)
            {
                prefix_unknown4 = 0;
            }
            else
            {
                prefix_unknown4 = (short) unknown4.length;
            }
            buffer.putShort(prefix_unknown4);
            
            for (int i = 0; i < prefix_unknown4; i++)
            {
                buffer.putChar(unknown4[i]);
            }
            buffer.put(unknown5);
            buffer.put(unknown6);
            buffer.put(unknown7);
            buffer.put(unknown8);
            buffer.put(unknown9);
            buffer.put(unknown10);
            buffer.putShort(unknown11);
            buffer.put(unknown12);
            buffer.put(unknown13);
            buffer.putInt(unknown14);
            buffer.put(unknown15);
        }
        catch (BufferOverflowException e)
        {
            return false;
        }

        setBuffer(buffer);

        return true;
    }
}