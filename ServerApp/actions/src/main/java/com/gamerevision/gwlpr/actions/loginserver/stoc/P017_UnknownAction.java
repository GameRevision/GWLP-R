/**
 * For copyright information see the LICENSE document.
 */

/**
 * Auto-generated by PacketCodeGen, on 2012-05-31
 */

package com.gamerevision.gwlpr.actions.loginserver.stoc;

import com.realityshard.shardlet.GenericAction;
import java.nio.BufferOverflowException;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * This is an automatically generated ShardletAction.
 * It resembles the packet template that has been 
 * parsed from our packet templates xml.
 *
 * Auto generated 
 *
 * @author GWLPR Template Updater
 */
public final class P017_UnknownAction extends GenericAction
{

    private int unknown1;
    private int unknown2;
    private int unknown3;
    private byte[] unknown4;
    private byte[] unknown5;
    private byte[] unknown6;
    private byte[] unknown7;
    private int unknown8;
    private byte[] unknown9;
    private byte unknown10;
    private int unknown11;


    public short getHeader()
    {
        return 17;
    }


    public void setUnknown1(int newValue)
    {
        unknown1 = newValue;
    }


    public void setUnknown2(int newValue)
    {
        unknown2 = newValue;
    }


    public void setUnknown3(int newValue)
    {
        unknown3 = newValue;
    }


    public void setUnknown4(byte[] newValue)
    {
        unknown4 = newValue;
    }


    public void setUnknown5(byte[] newValue)
    {
        unknown5 = newValue;
    }


    public void setUnknown6(byte[] newValue)
    {
        unknown6 = newValue;
    }


    public void setUnknown7(byte[] newValue)
    {
        unknown7 = newValue;
    }


    public void setUnknown8(int newValue)
    {
        unknown8 = newValue;
    }


    public void setUnknown9(byte[] newValue)
    {
        unknown9 = newValue;
    }


    public void setUnknown10(byte newValue)
    {
        unknown10 = newValue;
    }


    public void setUnknown11(int newValue)
    {
        unknown11 = newValue;
    }


    private int getSize()
    {
        int size = 73;

        if (unknown4 == null)
        {
            return 0;
        }
        
        if (unknown4.length != 8)
        {
            return 0;
        }
        if (unknown5 == null)
        {
            return 0;
        }
        
        if (unknown5.length != 8)
        {
            return 0;
        }
        if (unknown6 == null)
        {
            return 0;
        }
        
        if (unknown6.length != 16)
        {
            return 0;
        }
        if (unknown7 == null)
        {
            return 0;
        }
        
        if (unknown7.length != 16)
        {
            return 0;
        }
        if (unknown9 != null)
        {
            size += 1 * unknown9.length;
        }

        return size;
    }


    @Override
    public boolean serialize()
    {
        int size = getSize();

        if (size == 0)
        {
            return false;
        }

        ByteBuffer buffer = ByteBuffer.allocate(size).order(ByteOrder.LITTLE_ENDIAN);

        try
        {
            buffer.putShort(getHeader());

            buffer.putInt(unknown1);
            buffer.putInt(unknown2);
            buffer.putInt(unknown3);
            for (int i = 0; i < 8; i++)
            {
                buffer.put(unknown4[i]);
            }
            for (int i = 0; i < 8; i++)
            {
                buffer.put(unknown5[i]);
            }
            for (int i = 0; i < 16; i++)
            {
                buffer.put(unknown6[i]);
            }
            for (int i = 0; i < 16; i++)
            {
                buffer.put(unknown7[i]);
            }
            buffer.putInt(unknown8);
            short prefix_unknown9;
            if (unknown9 == null)
            {
                prefix_unknown9 = 0;
            }
            else
            {
                prefix_unknown9 = (short) unknown9.length;
            }
            buffer.putShort(prefix_unknown9);
            
            for (int i = 0; i < prefix_unknown9; i++)
            {
                buffer.put(unknown9[i]);
            }
            buffer.put(unknown10);
            buffer.putInt(unknown11);
        }
        catch (BufferOverflowException e)
        {
            return false;
        }

        setBuffer(buffer);

        return true;
    }
}