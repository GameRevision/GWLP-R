/**
 * For copyright information see the LICENSE document.
 */

/**
 * Auto-generated by PacketCodeGen, on 2012-09-28
 */

package gwlpr.actions.gameserver.stoc;

import realityshard.shardlet.utils.GenericAction;
import java.nio.BufferOverflowException;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * This is an automatically generated ShardletAction.
 * It resembles the packet template that has been 
 * parsed from our packet templates xml.
 *
 * Auto generated 
 *
 * @author GWLPR Template Updater
 */
public final class P015_UnknownAction extends GenericAction
{

    public final class NestedUnknown2
    {
    
        private int unknown3;


        public void setUnknown3(int newValue)
        {
            unknown3 = newValue;
        }


        private int getSize()
        {
            return 4;
        }


        public boolean serialize(ByteBuffer buffer)
        {
            try
            {
                buffer.putInt(unknown3);
            }
            catch (BufferOverflowException e)
            {
                return false;
            }

            return true;
        }
    }


    private short unknown1;
    private NestedUnknown2[] unknown2;


    public short getHeader()
    {
        return 15;
    }


    public void setUnknown1(short newValue)
    {
        unknown1 = newValue;
    }


    public void setUnknown2(NestedUnknown2[] newValue)
    {
        unknown2 = newValue;
    }


    private int getSize()
    {
        int size = 5;

        if (unknown2 != null)
        {
            for (NestedUnknown2 entry : unknown2)
            {
                int nextSize = entry.getSize();
        
                if (nextSize == 0)
                {
                    return 0;
                }
        
                size += entry.getSize();
            }
        }

        return size;
    }


    @Override
    public boolean serialize()
    {
        int size = getSize();

        if (size == 0)
        {
            return false;
        }

        ByteBuffer buffer = ByteBuffer.allocate(size).order(ByteOrder.LITTLE_ENDIAN);

        try
        {
            buffer.putShort(getHeader());

            buffer.putShort(unknown1);
            byte prefix_unknown2;
            if (unknown2 == null)
            {
                prefix_unknown2 = 0;
            }
            else
            {
                prefix_unknown2 = (byte) unknown2.length;
            }
            buffer.put(prefix_unknown2);
            
            for (int i = 0; i < prefix_unknown2; i++)
            {
                if (!unknown2[i].serialize(buffer))
                {
                    return false;
                }
            }
        }
        catch (BufferOverflowException e)
        {
            return false;
        }

        setBuffer(buffer);

        return true;
    }
}