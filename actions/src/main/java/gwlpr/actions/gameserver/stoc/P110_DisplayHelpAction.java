/**
 * For copyright information see the LICENSE document.
 */

/**
 * Auto-generated by PacketCodeGen, on 2012-09-28
 */

package gwlpr.actions.gameserver.stoc;

import realityshard.shardlet.utils.GenericAction;
import java.nio.BufferOverflowException;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * This is an automatically generated ShardletAction.
 * It resembles the packet template that has been 
 * parsed from our packet templates xml.
 *
 *
 * @author GWLPR Template Updater
 */
public final class P110_DisplayHelpAction extends GenericAction
{

    private int localID;
    private char[] text;
    private int time;
    private int imageFile;
    private int data5;


    public short getHeader()
    {
        return 110;
    }


    public void setLocalID(int newValue)
    {
        localID = newValue;
    }


    public void setText(char[] newValue)
    {
        text = newValue;
    }


    public void setTime(int newValue)
    {
        time = newValue;
    }


    public void setImageFile(int newValue)
    {
        imageFile = newValue;
    }


    public void setData5(int newValue)
    {
        data5 = newValue;
    }


    private int getSize()
    {
        int size = 20;

        if (text != null)
        {
            size += 2 * text.length;
        }

        return size;
    }


    @Override
    public boolean serialize()
    {
        int size = getSize();

        if (size == 0)
        {
            return false;
        }

        ByteBuffer buffer = ByteBuffer.allocate(size).order(ByteOrder.LITTLE_ENDIAN);

        try
        {
            buffer.putShort(getHeader());

            buffer.putInt(localID);
            short prefix_text;
            if (text == null)
            {
                prefix_text = 0;
            }
            else
            {
                prefix_text = (short) text.length;
            }
            buffer.putShort(prefix_text);
            
            for (int i = 0; i < prefix_text; i++)
            {
                buffer.putChar(text[i]);
            }
            buffer.putInt(time);
            buffer.putInt(imageFile);
            buffer.putInt(data5);
        }
        catch (BufferOverflowException e)
        {
            return false;
        }

        setBuffer(buffer);

        return true;
    }
}