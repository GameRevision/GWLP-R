/**
 * For copyright information see the LICENSE document.
 */

/**
 * Auto-generated by PacketCodeGen, on 2012-07-19
 */

package com.gamerevision.gwlpr.actions.gameserver.stoc;

import com.realityshard.shardlet.GenericAction;
import java.nio.BufferOverflowException;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * This is an automatically generated ShardletAction.
 * It resembles the packet template that has been 
 * parsed from our packet templates xml.
 *
 *
 * @author GWLPR Template Updater
 */
public final class P302_HandbookEntryAction extends GenericAction
{

    private int handbookID;
    private byte page;
    private char[] pageName1;
    private char[] pageName2;
    private char[] pageText1;
    private char[] pageText2;


    public short getHeader()
    {
        return 302;
    }


    public void setHandbookID(int newValue)
    {
        handbookID = newValue;
    }


    public void setPage(byte newValue)
    {
        page = newValue;
    }


    public void setPageName1(char[] newValue)
    {
        pageName1 = newValue;
    }


    public void setPageName2(char[] newValue)
    {
        pageName2 = newValue;
    }


    public void setPageText1(char[] newValue)
    {
        pageText1 = newValue;
    }


    public void setPageText2(char[] newValue)
    {
        pageText2 = newValue;
    }


    private int getSize()
    {
        int size = 15;

        if (pageName1 != null)
        {
            size += 2 * pageName1.length;
        }
        if (pageName2 != null)
        {
            size += 2 * pageName2.length;
        }
        if (pageText1 != null)
        {
            size += 2 * pageText1.length;
        }
        if (pageText2 != null)
        {
            size += 2 * pageText2.length;
        }

        return size;
    }


    @Override
    public boolean serialize()
    {
        int size = getSize();

        if (size == 0)
        {
            return false;
        }

        ByteBuffer buffer = ByteBuffer.allocate(size).order(ByteOrder.LITTLE_ENDIAN);

        try
        {
            buffer.putShort(getHeader());

            buffer.putInt(handbookID);
            buffer.put(page);
            short prefix_pageName1;
            if (pageName1 == null)
            {
                prefix_pageName1 = 0;
            }
            else
            {
                prefix_pageName1 = (short) pageName1.length;
            }
            buffer.putShort(prefix_pageName1);
            
            for (int i = 0; i < prefix_pageName1; i++)
            {
                buffer.putChar(pageName1[i]);
            }
            short prefix_pageName2;
            if (pageName2 == null)
            {
                prefix_pageName2 = 0;
            }
            else
            {
                prefix_pageName2 = (short) pageName2.length;
            }
            buffer.putShort(prefix_pageName2);
            
            for (int i = 0; i < prefix_pageName2; i++)
            {
                buffer.putChar(pageName2[i]);
            }
            short prefix_pageText1;
            if (pageText1 == null)
            {
                prefix_pageText1 = 0;
            }
            else
            {
                prefix_pageText1 = (short) pageText1.length;
            }
            buffer.putShort(prefix_pageText1);
            
            for (int i = 0; i < prefix_pageText1; i++)
            {
                buffer.putChar(pageText1[i]);
            }
            short prefix_pageText2;
            if (pageText2 == null)
            {
                prefix_pageText2 = 0;
            }
            else
            {
                prefix_pageText2 = (short) pageText2.length;
            }
            buffer.putShort(prefix_pageText2);
            
            for (int i = 0; i < prefix_pageText2; i++)
            {
                buffer.putChar(pageText2[i]);
            }
        }
        catch (BufferOverflowException e)
        {
            return false;
        }

        setBuffer(buffer);

        return true;
    }
}