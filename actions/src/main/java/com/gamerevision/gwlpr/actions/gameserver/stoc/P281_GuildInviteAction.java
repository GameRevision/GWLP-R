/**
 * For copyright information see the LICENSE document.
 */

/**
 * Auto-generated by PacketCodeGen, on 2012-07-19
 */

package com.gamerevision.gwlpr.actions.gameserver.stoc;

import com.realityshard.shardlet.GenericAction;
import java.nio.BufferOverflowException;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * This is an automatically generated ShardletAction.
 * It resembles the packet template that has been 
 * parsed from our packet templates xml.
 *
 * This can be used to display a guild invite, alliance 
 * invite, or guild guest in the guild window. 
 *
 * @author GWLPR Template Updater
 */
public final class P281_GuildInviteAction extends GenericAction
{

    private byte[] guildHallData;
    private char[] guildName;
    private char[] guildTag;
    private char[] invitedBy;
    private int date;
    private int minutes;
    private byte type;


    public short getHeader()
    {
        return 281;
    }


    public void setGuildHallData(byte[] newValue)
    {
        guildHallData = newValue;
    }


    public void setGuildName(char[] newValue)
    {
        guildName = newValue;
    }


    public void setGuildTag(char[] newValue)
    {
        guildTag = newValue;
    }


    public void setInvitedBy(char[] newValue)
    {
        invitedBy = newValue;
    }


    public void setDate(int newValue)
    {
        date = newValue;
    }


    public void setMinutes(int newValue)
    {
        minutes = newValue;
    }


    public void setType(byte newValue)
    {
        type = newValue;
    }


    private int getSize()
    {
        int size = 33;

        if (guildHallData == null)
        {
            return 0;
        }
        
        if (guildHallData.length != 16)
        {
            return 0;
        }
        if (guildName != null)
        {
            size += 2 * guildName.length;
        }
        if (guildTag != null)
        {
            size += 2 * guildTag.length;
        }
        if (invitedBy != null)
        {
            size += 2 * invitedBy.length;
        }

        return size;
    }


    @Override
    public boolean serialize()
    {
        int size = getSize();

        if (size == 0)
        {
            return false;
        }

        ByteBuffer buffer = ByteBuffer.allocate(size).order(ByteOrder.LITTLE_ENDIAN);

        try
        {
            buffer.putShort(getHeader());

            for (int i = 0; i < 16; i++)
            {
                buffer.put(guildHallData[i]);
            }
            short prefix_guildName;
            if (guildName == null)
            {
                prefix_guildName = 0;
            }
            else
            {
                prefix_guildName = (short) guildName.length;
            }
            buffer.putShort(prefix_guildName);
            
            for (int i = 0; i < prefix_guildName; i++)
            {
                buffer.putChar(guildName[i]);
            }
            short prefix_guildTag;
            if (guildTag == null)
            {
                prefix_guildTag = 0;
            }
            else
            {
                prefix_guildTag = (short) guildTag.length;
            }
            buffer.putShort(prefix_guildTag);
            
            for (int i = 0; i < prefix_guildTag; i++)
            {
                buffer.putChar(guildTag[i]);
            }
            short prefix_invitedBy;
            if (invitedBy == null)
            {
                prefix_invitedBy = 0;
            }
            else
            {
                prefix_invitedBy = (short) invitedBy.length;
            }
            buffer.putShort(prefix_invitedBy);
            
            for (int i = 0; i < prefix_invitedBy; i++)
            {
                buffer.putChar(invitedBy[i]);
            }
            buffer.putInt(date);
            buffer.putInt(minutes);
            buffer.put(type);
        }
        catch (BufferOverflowException e)
        {
            return false;
        }

        setBuffer(buffer);

        return true;
    }
}